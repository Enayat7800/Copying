import os
import json
from pyrogram import Client, filters

# ‡§¨‡•â‡§ü ‡§ï‡•ã ‡§á‡§®‡§ø‡§∂‡§ø‡§Ø‡§≤‡§æ‡§á‡§ú‡§º ‡§ï‡§∞‡•á‡§Ç
app = Client(
    "ultimate_copy_bot",
    api_id=os.environ.get("API_ID"),
    api_hash=os.environ.get("API_HASH"),
    bot_token=os.environ.get("BOT_TOKEN")
)

# ‡§°‡•á‡§ü‡§æ ‡§∏‡•ç‡§ü‡•ã‡§∞‡•á‡§ú ‡§ï‡•á ‡§≤‡§ø‡§è JSON ‡§´‡§æ‡§á‡§≤
CHANNELS_FILE = "channels.json"

# ‡§°‡•á‡§ü‡§æ ‡§≤‡•ã‡§° ‡§ï‡§∞‡•á‡§Ç
def load_data():
    try:
        with open(CHANNELS_FILE, "r") as f:
            data = json.load(f)
            data.setdefault("is_active", True)
            return data
    except (FileNotFoundError, json.JSONDecodeError):
        return {"sources": [], "targets": [], "is_active": True}

# ‡§°‡•á‡§ü‡§æ ‡§∏‡•á‡§µ ‡§ï‡§∞‡•á‡§Ç
def save_data(data):
    with open(CHANNELS_FILE, "w") as f:
        json.dump(data, indent=4, ensure_ascii=False, default=str)

# /start ‡§ï‡§Æ‡§æ‡§Ç‡§°
@app.on_message(filters.command("start") & filters.private)
async def start(client, message):
    help_text = """
    ü§ñ **Ultimate Copy Bot Commands** ü§ñ

    ‚Ä¢ ‡§∏‡•ã‡§∞‡•ç‡§∏ ‡§ê‡§° ‡§ï‡§∞‡•á‡§Ç: `/add_source ‡§ö‡•à‡§®‡§≤_ID`
    ‚Ä¢ ‡§ü‡§æ‡§∞‡§ó‡•á‡§ü ‡§ê‡§° ‡§ï‡§∞‡•á‡§Ç: `/add_target ‡§ö‡•à‡§®‡§≤_ID`
    ‚Ä¢ ‡§∏‡•ã‡§∞‡•ç‡§∏ ‡§∞‡§ø‡§Æ‡•Ç‡§µ ‡§ï‡§∞‡•á‡§Ç: `/remove_source ‡§ö‡•à‡§®‡§≤_ID`
    ‚Ä¢ ‡§ü‡§æ‡§∞‡§ó‡•á‡§ü ‡§∞‡§ø‡§Æ‡•Ç‡§µ ‡§ï‡§∞‡•á‡§Ç: `/remove_target ‡§ö‡•à‡§®‡§≤_ID`
    ‚Ä¢ ‡§∏‡§≠‡•Ä ‡§ö‡•à‡§®‡§≤‡•ç‡§∏ ‡§¶‡•á‡§ñ‡•á‡§Ç: `/list`
    ‚Ä¢ ‡§¨‡•â‡§ü ‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§∞‡•á‡§Ç: `/start_work`
    ‚Ä¢ ‡§¨‡•â‡§ü ‡§∞‡•ã‡§ï‡•á‡§Ç: `/stop_work`

    üìå ‡§ö‡•à‡§®‡§≤ ID ‡§™‡§æ‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è [@username_to_id_bot](https://t.me/username_to_id_bot) ‡§ï‡§æ ‡§á‡§∏‡•ç‡§§‡•á‡§Æ‡§æ‡§≤ ‡§ï‡§∞‡•á‡§Ç‡•§
    """
    await message.reply_text(help_text, disable_web_page_preview=True)

# /add_source ‡§ï‡§Æ‡§æ‡§Ç‡§°
@app.on_message(filters.command("add_source") & filters.private)
async def add_source(client, message):
    data = load_data()
    try:
        source_id = int(message.text.split()[1])
        # ‡§™‡§¨‡•ç‡§≤‡§ø‡§ï ‡§ö‡•à‡§®‡§≤ ‡§Æ‡•á‡§Ç ‡§ú‡•â‡§á‡§® ‡§ï‡§∞‡•á‡§Ç
        try:
            await client.join_chat(source_id)
        except Exception as e:
            await message.reply(f"‚ö†Ô∏è ‡§ö‡•à‡§®‡§≤ ‡§Æ‡•á‡§Ç ‡§ú‡•â‡§á‡§® ‡§®‡§π‡•Ä‡§Ç ‡§ï‡§∞ ‡§™‡§æ‡§Ø‡§æ: {str(e)}")
            return
        if source_id not in data["sources"]:
            data["sources"].append(source_id)
            save_data(data)
            await message.reply(f"‚úÖ **‡§∏‡•ã‡§∞‡•ç‡§∏ ‡§ê‡§° ‡§π‡•Å‡§Ü:** `{source_id}`")
        else:
            await message.reply("‚ö†Ô∏è ‡§Ø‡§π ‡§∏‡•ã‡§∞‡•ç‡§∏ ‡§™‡§π‡§≤‡•á ‡§∏‡•á ‡§ê‡§° ‡§π‡•à!")
    except:
        await message.reply("‚ùå ‡§ó‡§≤‡§§ ‡§´‡•â‡§∞‡•ç‡§Æ‡•á‡§ü! ‡§â‡§¶‡§æ‡§π‡§∞‡§£: `/add_source -1001234567890`")

# /add_target ‡§ï‡§Æ‡§æ‡§Ç‡§°
@app.on_message(filters.command("add_target") & filters.private)
async def add_target(client, message):
    data = load_data()
    try:
        target_id = int(message.text.split()[1])
        if target_id not in data["targets"]:
            data["targets"].append(target_id)
            save_data(data)
            await message.reply(f"‚úÖ **‡§ü‡§æ‡§∞‡§ó‡•á‡§ü ‡§ê‡§° ‡§π‡•Å‡§Ü:** `{target_id}`")
        else:
            await message.reply("‚ö†Ô∏è ‡§Ø‡§π ‡§ü‡§æ‡§∞‡§ó‡•á‡§ü ‡§™‡§π‡§≤‡•á ‡§∏‡•á ‡§ê‡§° ‡§π‡•à!")
    except:
        await message.reply("‚ùå ‡§ó‡§≤‡§§ ‡§´‡•â‡§∞‡•ç‡§Æ‡•á‡§ü! ‡§â‡§¶‡§æ‡§π‡§∞‡§£: `/add_target -1009876543210`")

# /remove_source ‡§ï‡§Æ‡§æ‡§Ç‡§°
@app.on_message(filters.command("remove_source") & filters.private)
async def remove_source(client, message):
    data = load_data()
    try:
        source_id = int(message.text.split()[1])
        if source_id in data["sources"]:
            data["sources"].remove(source_id)
            save_data(data)
            await message.reply(f"üóëÔ∏è **‡§∏‡•ã‡§∞‡•ç‡§∏ ‡§∞‡§ø‡§Æ‡•Ç‡§µ ‡§π‡•Å‡§Ü:** `{source_id}`")
        else:
            await message.reply("‚ùå ‡§Ø‡§π ‡§∏‡•ã‡§∞‡•ç‡§∏ ‡§ê‡§° ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à!")
    except:
        await message.reply("‚ùå ‡§ó‡§≤‡§§ ‡§´‡•â‡§∞‡•ç‡§Æ‡•á‡§ü! ‡§â‡§¶‡§æ‡§π‡§∞‡§£: `/remove_source -1001234567890`")

# /remove_target ‡§ï‡§Æ‡§æ‡§Ç‡§°
@app.on_message(filters.command("remove_target") & filters.private)
async def remove_target(client, message):
    data = load_data()
    try:
        target_id = int(message.text.split()[1])
        if target_id in data["targets"]:
            data["targets"].remove(target_id)
            save_data(data)
            await message.reply(f"üóëÔ∏è **‡§ü‡§æ‡§∞‡§ó‡•á‡§ü ‡§∞‡§ø‡§Æ‡•Ç‡§µ ‡§π‡•Å‡§Ü:** `{target_id}`")
        else:
            await message.reply("‚ùå ‡§Ø‡§π ‡§ü‡§æ‡§∞‡§ó‡•á‡§ü ‡§ê‡§° ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à!")
    except:
        await message.reply("‚ùå ‡§ó‡§≤‡§§ ‡§´‡•â‡§∞‡•ç‡§Æ‡•á‡§ü! ‡§â‡§¶‡§æ‡§π‡§∞‡§£: `/remove_target -1009876543210`")

# /list ‡§ï‡§Æ‡§æ‡§Ç‡§°
@app.on_message(filters.command("list") & filters.private)
async def list_channels(client, message):
    data = load_data()
    response = "üìú **‡§ö‡•à‡§®‡§≤‡•ç‡§∏ ‡§ï‡•Ä ‡§≤‡§ø‡§∏‡•ç‡§ü:**\n\n"
    response += f"‚Ä¢ ‡§∏‡•ã‡§∞‡•ç‡§∏: `{', '.join(map(str, data['sources']))}`\n"
    response += f"‚Ä¢ ‡§ü‡§æ‡§∞‡§ó‡•á‡§ü: `{', '.join(map(str, data['targets']))}`\n"
    response += f"‚Ä¢ ‡§∏‡•ç‡§ü‡•á‡§ü‡§∏: `{'‡§ï‡§æ‡§Æ ‡§ï‡§∞ ‡§∞‡§π‡§æ ‡§π‡•à' if data['is_active'] else '‡§∞‡•Å‡§ï‡§æ ‡§π‡•Å‡§Ü'}`"
    await message.reply_text(response)

# /start_work ‡§î‡§∞ /stop_work ‡§ï‡§Æ‡§æ‡§Ç‡§°
@app.on_message(filters.command("start_work") & filters.private)
async def start_work(client, message):
    data = load_data()
    data["is_active"] = True
    save_data(data)
    await message.reply("üöÄ ‡§¨‡•â‡§ü ‡§®‡•á ‡§ï‡§æ‡§Æ ‡§ï‡§∞‡§®‡§æ ‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§∞ ‡§¶‡§ø‡§Ø‡§æ ‡§π‡•à!")

@app.on_message(filters.command("stop_work") & filters.private)
async def stop_work(client, message):
    data = load_data()
    data["is_active"] = False
    save_data(data)
    await message.reply("üõë ‡§¨‡•â‡§ü ‡§®‡•á ‡§ï‡§æ‡§Æ ‡§∞‡•ã‡§ï ‡§¶‡§ø‡§Ø‡§æ ‡§π‡•à!")

# ‡§Æ‡•à‡§∏‡•á‡§ú ‡§ï‡•â‡§™‡•Ä ‡§ï‡§∞‡§®‡•á ‡§ï‡§æ ‡§≤‡•â‡§ú‡§ø‡§ï
@app.on_message(filters.channel)
async def copy_messages(client, message):
    data = load_data()
    if not data["is_active"] or message.chat.id not in data["sources"]:
        return

    for target_id in data["targets"]:
        try:
            # ‡§ü‡•á‡§ï‡•ç‡§∏‡•ç‡§ü ‡§Æ‡•à‡§∏‡•á‡§ú
            if message.text:
                await client.send_message(target_id, message.text)
            
            # ‡§Æ‡•Ä‡§°‡§ø‡§Ø‡§æ ‡§Æ‡•à‡§∏‡•á‡§ú
            elif message.media:
                media = message.photo or message.video or message.document or message.audio or message.sticker
                caption = message.caption if message.caption else ""
                await client.send_cached_media(
                    chat_id=target_id,
                    file_id=media.file_id,
                    caption=caption
                )
        except Exception as e:
            await message.reply(f"‚ùå ‡§ü‡§æ‡§∞‡§ó‡•á‡§ü `{target_id}` ‡§Æ‡•á‡§Ç ‡§è‡§∞‡§∞: {str(e)}")

app.run()
