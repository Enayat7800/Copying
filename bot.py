from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
import os
import time
import logging

# Logging setup
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# Global variables
user_cooldowns = {}
ADULT_KEYWORDS = ["porn", "adult", "xxx", "nsfw", "18+", "explicit", "sex", "hot"]

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üìÅ **File/Video to Link Bot**\n\n‡§ï‡§ø‡§∏‡•Ä ‡§≠‡•Ä ‡§´‡§º‡§æ‡§á‡§≤ ‡§Ø‡§æ ‡§µ‡•Ä‡§°‡§ø‡§Ø‡•ã ‡§ï‡•ã ‡§≠‡•á‡§ú‡•á‡§Ç, ‡§Æ‡•à‡§Ç ‡§°‡§æ‡§â‡§®‡§≤‡•ã‡§° ‡§≤‡§ø‡§Ç‡§ï ‡§¶‡•Ç‡§Ç‡§ó‡§æ!")

async def handle_media(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    user_id = user.id
    current_time = time.time()

    # Cooldown check
    if user_id in user_cooldowns and (current_time - user_cooldowns[user_id] < 60):
        await update.message.reply_text("‚è≥ 1 ‡§Æ‡§ø‡§®‡§ü ‡§ï‡•á ‡§¨‡§æ‡§¶ ‡§®‡§à ‡§´‡§º‡§æ‡§á‡§≤ ‡§≠‡•á‡§ú‡•á‡§Ç‡•§")
        return

    # Get file details
    if update.message.document:
        file = update.message.document
    elif update.message.video:
        file = update.message.video
    else:
        return

    file_name = file.file_name or "file"
    file_size = file.file_size / (1024 * 1024)  # MB ‡§Æ‡•á‡§Ç

    # Adult content check
    if any(keyword in file_name.lower() for keyword in ADULT_KEYWORDS):
        await update.message.reply_text("üö´ Adult content ‡§°‡§ø‡§ü‡•á‡§ï‡•ç‡§ü ‡§π‡•Å‡§Ü‡•§ ‡§Ü‡§™‡§ï‡•ã ‡§¨‡•ç‡§≤‡•â‡§ï ‡§ï‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ ‡§π‡•à!")
        return

    # File size check (2GB = 2000MB)
    if file_size > 2000:
        await update.message.reply_text("‚ùå ‡§´‡§º‡§æ‡§á‡§≤ 2GB ‡§∏‡•á ‡§¨‡§°‡§º‡•Ä ‡§π‡•à!")
        return

    # Generate Telegram direct link
    try:
        tg_file = await context.bot.get_file(file.file_id)
        download_url = f"https://api.telegram.org/file/bot{os.environ['TOKEN']}/{tg_file.file_path}"
        
        # Send instructions with link
        await update.message.reply_text(
            f"‚úÖ **{file_name} ‡§ï‡§æ ‡§°‡§æ‡§â‡§®‡§≤‡•ã‡§° ‡§≤‡§ø‡§Ç‡§ï:**\n\n"
            f"{download_url}\n\n"
            "‚ö†Ô∏è **‡§®‡•ã‡§ü:**\n"
            "1. ‡§≤‡§ø‡§Ç‡§ï 1 ‡§ò‡§Ç‡§ü‡•á ‡§§‡§ï ‡§µ‡•à‡§ß ‡§π‡•à‡•§\n"
            "2. ‡§°‡§æ‡§â‡§®‡§≤‡•ã‡§° ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§≤‡§ø‡§Ç‡§ï ‡§™‡§∞ **‡§∞‡§æ‡§á‡§ü-‡§ï‡•ç‡§≤‡§ø‡§ï ‡§ï‡§∞‡•á‡§Ç ‚Üí 'Save link as...' ‡§ö‡•Å‡§®‡•á‡§Ç**‡•§\n"
            "3. ‡§µ‡•Ä‡§°‡§ø‡§Ø‡•ã/‡§´‡§º‡§æ‡§á‡§≤‡•á‡§Ç 2GB ‡§§‡§ï ‡§∏‡§™‡•ã‡§∞‡•ç‡§ü ‡§π‡•à‡§Ç‡•§"
        )
        user_cooldowns[user_id] = current_time
    except Exception as e:
        logger.error(f"Error: {e}")
        await update.message.reply_text("‚ùå ‡§≤‡§ø‡§Ç‡§ï ‡§ú‡§®‡§∞‡•á‡§ü ‡§ï‡§∞‡§®‡•á ‡§Æ‡•á‡§Ç ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø!")

def main():
    TOKEN = os.environ.get("TOKEN")
    if not TOKEN:
        raise ValueError("TOKEN environment variable ‡§∏‡•á‡§ü ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à!")

    app = Application.builder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.Document.ALL | filters.VIDEO, handle_media))
    
    logger.info("Bot started!")
    app.run_polling()

if __name__ == "__main__":
    main()
